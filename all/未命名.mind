{"root":{"data":{"id":"d61n9mcqfjk0","created":1733186300011,"text":"中心主题"},"children":[{"data":{"id":"d61nat4odc80","created":1733186393125,"text":"学习","layout_mind_offset":{"x":-73.99999779462814,"y":1.9999999403953552},"priority":"1"},"children":[{"data":{"id":"d61nat4oj680","created":1733186393125,"text":"Java"},"children":[]},{"data":{"id":"d61nat4on8o0","created":1733186393125,"text":"web3d"},"children":[{"data":{"id":"d61nat4omp40","created":1733186393125,"text":"canvas"},"children":[]},{"data":{"id":"d61nat4om2w0","created":1733186393125,"text":"svg"},"children":[]},{"data":{"id":"d61nat4oizs0","created":1733186393125,"text":"d3.js"},"children":[]},{"data":{"id":"d61nat4okko0","created":1733186393125,"text":"webgl"},"children":[{"data":{"id":"d61nat4obhc0","created":1733186393125,"text":"介绍"},"children":[{"data":{"id":"d61nat4o4kg0","created":1733186393125,"text":"1. 直接与 GPU 交互"},"children":[{"data":{"id":"d61nat4o8v40","created":1733186393125,"text":"允许开发者直接与 GPU 交互，这意味着开发者可以控制渲染的每一个细节，如顶点处理、片段着色器、纹理处理等。"},"children":[]}]},{"data":{"id":"d61nat4p3h40","created":1733186393126,"text":"2. 着色器"},"children":[{"data":{"id":"d61nat4p6ls0","created":1733186393126,"text":"WEBGL 使用 GLSL 编写着色器程序。做色漆是运行在GPU 上的小程序，用于处理顶点和像素数据。WebGL 的图形渲染分为两个主要阶段：顶点着色器处理几何图形的顶点，片段着色器决定最终像素的颜色。"},"children":[]},{"data":{"id":"d61nat4oui80","created":1733186393126,"text":"着色器提供了高度自定义的能力，使开发者可以实现复杂的视觉效果，如光照模型、纹理映射、阴影处理等。"},"children":[]}]},{"data":{"id":"d61nat4p3fc0","created":1733186393126,"text":"3. 渲染管线"},"children":[{"data":{"id":"d61nat4ov2o0","created":1733186393126,"text":"WebGL 的渲染管线是固定的，包括顶点处理、图元装配、光栅化、片段处理等步骤。"},"children":[]}]},{"data":{"id":"d61nat4p6zc0","created":1733186393126,"text":"4. 低级别API"},"children":[{"data":{"id":"d61nat4opcw0","created":1733186393126,"text":"WebGL 是一个非常低级别的 API，开发者需要手动管理图形渲染中的很多细节，如创建缓冲区、加载纹理、编译着色器、处理深度缓冲区等。虽然这赋予了极大的控制权，但也增加了开发的复杂性。"},"children":[]}]}]},{"data":{"id":"d61nat4ovy00","created":1733186393126,"text":"渲染流程"},"children":[{"data":{"id":"d61nat4op600","created":1733186393126,"text":"1. 初始化WebGL上下文"},"children":[{"data":{"id":"d61nat4p5js0","created":1733186393126,"text":"创建 <canvas> 元素并获取 WebGL 上下文 (canvas.getContext('webgl') 或 webgl2)."},"children":[]}]},{"data":{"id":"d61nat4p8z40","created":1733186393126,"text":"2. 编写和编译着色器"},"children":[{"data":{"id":"d61nat4p2940","created":1733186393126,"text":"1）编写顶点着色器和片段着色器的 GLSL 代码。"},"children":[]},{"data":{"id":"d61nat4p7540","created":1733186393126,"text":"2）使用 gl.createShader() 创建着色器，gl.shaderSource() 提供源码，gl.compileShader() 编译着色器。"},"children":[]},{"data":{"id":"d61nat4oyfc0","created":1733186393126,"text":"3）使用 gl.createProgram() 创建程序，gl.attachShader() 附加着色器，gl.linkProgram() 链接程序，gl.useProgram() 激活程序。"},"children":[]}]},{"data":{"id":"d61nat4ops00","created":1733186393126,"text":"3. 设置缓冲区"},"children":[{"data":{"id":"d61nat4p6dk0","created":1733186393126,"text":"创建顶点缓冲区（gl.createBuffer()），绑定缓冲区（gl.bindBuffer()），上传顶点数据（gl.bufferData()）。"},"children":[]},{"data":{"id":"d61nat4p8wg0","created":1733186393126,"text":"创建索引缓冲区（gl.createBuffer()），绑定缓冲区（gl.bindBuffer()），上传索引数据（gl.bufferData()）。"},"children":[]}]},{"data":{"id":"d61nat4p7cw0","created":1733186393126,"text":"4.配置渲染状态"},"children":[{"data":{"id":"d61nat4ou4g0","created":1733186393126,"text":"设置视口（gl.viewport()）。"},"children":[]},{"data":{"id":"d61nat4ouow0","created":1733186393126,"text":"配置深度测试、混合等状态（gl.enable()）。"},"children":[]}]},{"data":{"id":"d61nat4p4o00","created":1733186393126,"text":"5.绘制图形"},"children":[{"data":{"id":"d61nat4oz6g0","created":1733186393126,"text":"绑定缓冲区和着色器（gl.bindBuffer()，gl.useProgram()）。"},"children":[]},{"data":{"id":"d61nat4oz0g0","created":1733186393126,"text":"传递 uniform 数据（gl.uniformMatrix4fv()）。"},"children":[]},{"data":{"id":"d61nat4p1ug0","created":1733186393126,"text":"执行绘制命令（gl.drawArrays() 或 gl.drawElements()）。"},"children":[]}]},{"data":{"id":"d61nat4p8ds0","created":1733186393126,"text":"6.重复渲染"},"children":[{"data":{"id":"d61nat4oxxk0","created":1733186393126,"text":"使用 requestAnimationFrame() 循环更新动画并重新绘制场景。"},"children":[]}]}]}]},{"data":{"id":"d61nat4p4e80","created":1733186393126,"text":"threejs"},"children":[{"data":{"id":"d61nat4ouy00","created":1733186393126,"text":"介绍"},"children":[{"data":{"id":"d61nat4oysw0","created":1733186393126,"text":"1. 抽象与封装"},"children":[{"data":{"id":"d61nat4pm8g0","created":1733186393127,"text":"Three.js 对 WebGL 的底层进行了大量封装，提供了更高层次的抽象。例如，在Three.js中，几何体、材质、相机和灯光等都是现成的对象，开发者只需要调用相关API即可快速创建3D场景，而不必处理 WebGL 中繁琐的细节。"},"children":[]}]},{"data":{"id":"d61nat4pe2g0","created":1733186393127,"text":"2. 场景图(Scene Graph)"},"children":[{"data":{"id":"d61nat4posg0","created":1733186393127,"text":"Threejs 主要有几个核心组件，分别是场景(Scene)、相机(Camera)、灯光(Light)、物体(Object3D)、几何体(Geometry)、材质(Material)。"},"children":[]},{"data":{"id":"d61nat4pbpk0","created":1733186393127,"text":"Three.js 使用场景图的概念来组织 3D 对象。所有 3D 对象（如几何体、灯光、相机等）都是 Object3D 的实例，它们可以被添加到 Scene 中。场景图允许开发者以层次化的方式管理和操作这些对象，使得复杂场景的构建变得更加直观。"},"children":[]}]},{"data":{"id":"d61nat4pmu00","created":1733186393127,"text":"3. 即用型组件"},"children":[{"data":{"id":"d61nat4pn680","created":1733186393127,"text":"Three.js 提供了大量即用型组件，如几何体（BoxGeometry、SphereGeometry 等）、材质（MeshBasicMaterial、MeshPhongMaterial 等）、灯光（DirectionalLight、PointLight 等）、相机（PerspectiveCamera、OrthographicCamera 等）。这些组件大大降低了开发复杂 3D 场景的门槛。"},"children":[]}]},{"data":{"id":"d61nat4plm00","created":1733186393127,"text":"4. 着色器的简化使用"},"children":[{"data":{"id":"d61nat4p9wo0","created":1733186393127,"text":"虽然 Three.js 封装了 WebGL 的很多细节，但它仍然保留了对自定义着色器的支持。开发者可以使用 ShaderMaterial 来定义自己的着色器程序，同时 Three.js 还提供了一些简单的工具和库来简化着色器的编写和管理。"},"children":[]}]},{"data":{"id":"d61nat4pkag0","created":1733186393127,"text":"5. 渲染循环与动画"},"children":[{"data":{"id":"d61nat4p9bs0","created":1733186393127,"text":"Three.js 提供了一个简单易用的渲染循环，通过 requestAnimationFrame 方法，开发者可以轻松实现动画效果。Three.js 还内置了多种动画和过渡效果，使得开发者能够快速为场景添加动态元素。"},"children":[]}]}]},{"data":{"id":"d61nat4po880","created":1733186393127,"text":"渲染流程"},"children":[{"data":{"id":"d61nat4prls0","created":1733186393127,"text":"1. 创建场景(Scene)"},"children":[{"data":{"id":"d61nat4pnvs0","created":1733186393127,"text":"创建一个 THREE.Scene 对象，用于容纳所有 3D 对象、光源和相机。"},"children":[]}]},{"data":{"id":"d61nat4phc80","created":1733186393127,"text":"2. 创建相机(Camera)"},"children":[{"data":{"id":"d61nat4po2o0","created":1733186393127,"text":"创建一个相机对象(如 THREE.PerspectiveCamera 或 THREE.OrthographicCamera)，设置视角和位置"},"children":[]}]},{"data":{"id":"d61nat4prs00","created":1733186393127,"text":"3. 创建渲染器（Renderer）"},"children":[{"data":{"id":"d61nat4pppk0","created":1733186393127,"text":"创建THREE.WebGLRender对象，绑定到 <canvas>元素"},"children":[]},{"data":{"id":"d61nat4pa200","created":1733186393127,"text":"设置渲染器的大小和其他属性"},"children":[]}]},{"data":{"id":"d61nat4pgv40","created":1733186393127,"text":"4.创建和配置几何体、材质和网格（Mesh） ："},"children":[{"data":{"id":"d61nat4pzh40","created":1733186393128,"text":"创建几何体对象（如 THREE.BoxGeomerty）"},"children":[]},{"data":{"id":"d61nat4qd3s0","created":1733186393128,"text":"创建材质对象（如 THREE.MeshBasicMaterial）"},"children":[]},{"data":{"id":"d61nat4qcyw0","created":1733186393128,"text":"创建网格对象（THREE.Mesh）,将几何体和材质组合在一起。"},"children":[]}]},{"data":{"id":"d61nat4pxgo0","created":1733186393128,"text":"5. 添加对象到场景"},"children":[{"data":{"id":"d61nat4qd280","created":1733186393128,"text":"使用 scene.add() 方法将网格对象、光源等添加到场景中。"},"children":[]}]},{"data":{"id":"d61nat4q72o0","created":1733186393128,"text":"6. 渲染场景"},"children":[{"data":{"id":"d61nat4q0nc0","created":1733186393128,"text":"使用 renderer.render(scene,camera) 渲染场景。"},"children":[]}]},{"data":{"id":"d61nat4qa8w0","created":1733186393128,"text":"7. 更新和动画"},"children":[{"data":{"id":"d61nat4qbuo0","created":1733186393128,"text":"使用requestAnimationFrame() 更新动画并重绘场景"},"children":[]},{"data":{"id":"d61nat4q89k0","created":1733186393128,"text":"在每帧中更新对象的位置或属性，然后调用 renderer.render() 渲染更新后的场景。"},"children":[]}]}]},{"data":{"id":"d61nat4pvi00","created":1733186393128,"text":"组成"},"children":[{"data":{"id":"d61nat4pxnk0","created":1733186393128,"text":"场景管理"},"children":[{"data":{"id":"d61nat4q31c0","created":1733186393128,"text":"灯光"},"children":[]},{"data":{"id":"d61nat4qw800","created":1733186393129,"text":"材质"},"children":[]},{"data":{"id":"d61nat4r09c0","created":1733186393129,"text":"着色器"},"children":[]}]},{"data":{"id":"d61nat4qso00","created":1733186393129,"text":"模型"},"children":[{"data":{"id":"d61nat4qins0","created":1733186393129,"text":"几何体"},"children":[]}]},{"data":{"id":"d61nat4qgk00","created":1733186393129,"text":"动画"},"children":[{"data":{"id":"d61nat4r0sg0","created":1733186393129,"text":"骨骼动画"},"children":[]}]},{"data":{"id":"d61nat4qrfs0","created":1733186393129,"text":"粒子系统"},"children":[]},{"data":{"id":"d61nat4qjxk0","created":1733186393129,"text":"多种渲染器"},"children":[]}]}]},{"data":{"id":"d61nat4qgnc0","created":1733186393129,"text":"babylon.js"},"children":[{"data":{"id":"d61nat4r04w0","created":1733186393129,"text":"使用TypeScript.js开发"},"children":[]}]},{"data":{"id":"d61nat4r1co0","created":1733186393129,"text":"计算机图形学"},"children":[]},{"data":{"id":"d61nat4qsuo0","created":1733186393129,"text":"blender建模"},"children":[]}]},{"data":{"id":"d61nat4qy4g0","created":1733186393129,"text":"建模"},"children":[]},{"data":{"id":"d61nat4qzu80","created":1733186393129,"text":"前端深化 "},"children":[]},{"data":{"id":"d61nat4quj40","created":1733186393129,"text":"Java"},"children":[]},{"data":{"id":"d61nat4qk4w0","created":1733186393129,"text":"数据结构"},"children":[]},{"data":{"id":"d61nat4qjyg0","created":1733186393129,"text":"微信公众平台"},"children":[]}]}]},"template":"default","theme":"fresh-blue","version":"1.4.43"}